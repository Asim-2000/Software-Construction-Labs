// Parent class generalInfo that cotnains the general information of all child classes
class GeneralInfo {
  constructor(name, yearBuild) {
    this.name = name;
    this.yearBuild = yearBuild;
  }
}

//Child class Park extending parent class GeneralInfo
class Park extends GeneralInfo {
  constructor(name, yearBuild, area, numOfTrees) {
    super(name, yearBuild);
    this.area = area; 
    this.numOfTrees = numOfTrees;
  }

    //method treeDensity that returns the density of trees in a specific park
  treeDensity() {
    const density = this.numOfTrees / this.area;
    console.log(
      `${this.name} has a tree density of ${density} trees per square km.`
    );
  }
}

//Child class Street extending parent class GeneralInfo
class Street extends GeneralInfo {
  constructor(name, yearBuild, length, size) {
    super(name, yearBuild);
    this.length = length;
    this.size = size;
  }

//method StreetClassification that classifies sreets on the basis of their sizes and then returns them
  StreetClassification() {
    const streetclass = new Map();
    streetclass.set(1, "tiny");
    streetclass.set(2, "small");
    streetclass.set(3, "normal");
    streetclass.set(4, "big");
    streetclass.set(5, "huge");
    console.log(
      `${this.name}, build in ${this.yearBuild}, is a ${streetclass.get(
        this.size
      )} street.`
    );
  }
}

//Calculation function that calculates sum and avg
function Calculation(arr) {
  const sum = arr.reduce((prev, cur, index) => prev + cur, 0);
  return [sum, sum / arr.length];
}
//Report of Parks generated by reportStreets function
function reportParks(p) {
  console.log("!----PARKS REPORTS----!");
  // Density
  p.forEach((el) => el.treeDensity());

  // Average Age
  const ages = p.map((el) => new Date().getFullYear() - el.yearBuild);
  const [totalAge, avgAge] = Calculation(ages);
  console.log(`Our ${p.length} parks have an average of ${avgAge} years.`);

  // Which park has more than 1000 trees;
  const i = p.map((el) => el.numOfTrees).findIndex((el) => el >= 1000);
  console.log(`${p[i].name} has more than 1000 trees.`);
}

//Report of streets generated by reportStreets function
function reportStreets(s) {
  console.log("!---- STREETS REPORT ----!");

  //Total and average length of the town's streets
  const [totalLength, avgLength] = Calculation(s.map((el) => el.length));
  console.log(
    `Our ${s.length} streets have a total length of ${totalLength} km, with an average of ${avgLength} km.`
  );

  //Classify sizes
  s.forEach((el) => el.StreetClassification());
}

const myParks = [
  new Park("Safari Park", 1987, 0.2, 215),
  new Park("F7 Park", 1894, 2.9, 3541),
  new Park("Lake Park", 1953, 0.4, 949),
];

const myStreets = [
  new Street("New Avenue", 1999, 1.1, 4),
  new Street("Evergreen Street", 2008, 2.7, 2),
  new Street("7th Street", 2015, 0.8),
  new Street("Sunset Boulevard", 1982, 2.5, 5),
];


reportParks(myParks);
reportStreets(myStreets);
